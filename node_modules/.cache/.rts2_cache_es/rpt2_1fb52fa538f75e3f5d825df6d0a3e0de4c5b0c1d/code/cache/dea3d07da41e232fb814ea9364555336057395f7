{"code":"export function isValidSocketEvent(event) {\n    return !!event.type;\n}\n//# sourceMappingURL=events.js.map","references":["/Users/aleksai/Desktop/ /projects/elevenlabs-client/src/utils/connection.ts"],"map":"{\"version\":3,\"file\":\"events.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/utils/events.ts\"],\"names\":[],\"mappings\":\"AA0GA,MAAM,UAAU,kBAAkB,CAAC,KAAU;IAC3C,OAAO,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC;AACtB,CAAC\"}","dts":{"name":"/Users/aleksai/Desktop/ /projects/elevenlabs-client/dist/utils/events.d.ts","writeByteOrderMark":false,"text":"import { Language } from \"./connection\";\nexport type UserTranscriptionEvent = {\n    type: \"user_transcript\";\n    user_transcription_event: {\n        user_transcript: string;\n    };\n};\nexport type AgentResponseEvent = {\n    type: \"agent_response\";\n    agent_response_event: {\n        agent_response: string;\n    };\n};\nexport type AgentAudioEvent = {\n    type: \"audio\";\n    audio_event: {\n        audio_base_64: string;\n        event_id: number;\n    };\n};\nexport type InterruptionEvent = {\n    type: \"interruption\";\n    interruption_event: {\n        event_id: number;\n    };\n};\nexport type InternalTentativeAgentResponseEvent = {\n    type: \"internal_tentative_agent_response\";\n    tentative_agent_response_internal_event: {\n        tentative_agent_response: string;\n    };\n};\nexport type ConfigEvent = {\n    type: \"conversation_initiation_metadata\";\n    conversation_initiation_metadata_event: {\n        conversation_id: string;\n        agent_output_audio_format: string;\n        user_input_audio_format?: string;\n    };\n};\nexport type PingEvent = {\n    type: \"ping\";\n    ping_event: {\n        event_id: number;\n        ping_ms?: number;\n    };\n};\nexport type ClientToolCallEvent = {\n    type: \"client_tool_call\";\n    client_tool_call: {\n        tool_name: string;\n        tool_call_id: string;\n        parameters: any;\n        expects_response: boolean;\n    };\n};\nexport type IncomingSocketEvent = UserTranscriptionEvent | AgentResponseEvent | AgentAudioEvent | InterruptionEvent | InternalTentativeAgentResponseEvent | ConfigEvent | PingEvent | ClientToolCallEvent;\nexport type PongEvent = {\n    type: \"pong\";\n    event_id: number;\n};\nexport type UserAudioEvent = {\n    user_audio_chunk: string;\n};\nexport type UserFeedbackEvent = {\n    type: \"feedback\";\n    score: \"like\" | \"dislike\";\n    event_id: number;\n};\nexport type ClientToolResultEvent = {\n    type: \"client_tool_result\";\n    tool_call_id: string;\n    result: any;\n    is_error: boolean;\n};\nexport type InitiationClientDataEvent = {\n    type: \"conversation_initiation_client_data\";\n    conversation_config_override?: {\n        agent?: {\n            prompt?: {\n                prompt?: string;\n            };\n            first_message?: string;\n            language?: Language;\n        };\n        tts?: {\n            voice_id?: string;\n        };\n    };\n    custom_llm_extra_body?: any;\n};\nexport type OutgoingSocketEvent = PongEvent | UserAudioEvent | InitiationClientDataEvent | UserFeedbackEvent | ClientToolResultEvent;\nexport declare function isValidSocketEvent(event: any): event is IncomingSocketEvent;\n"}}
