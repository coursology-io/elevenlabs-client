{"code":"import { isValidSocketEvent, } from \"./events\";\nconst MAIN_PROTOCOL = \"convai\";\nconst WSS_API_ORIGIN = \"wss://api.elevenlabs.io\";\nconst WSS_API_PATHNAME = \"/v1/convai/conversation?agent_id=\";\nexport class Connection {\n    socket;\n    conversationId;\n    inputFormat;\n    outputFormat;\n    static async create(config) {\n        let socket = null;\n        try {\n            const origin = config.origin ?? WSS_API_ORIGIN;\n            const url = config.signedUrl\n                ? config.signedUrl\n                : origin + WSS_API_PATHNAME + config.agentId;\n            const protocols = [MAIN_PROTOCOL];\n            if (config.authorization) {\n                protocols.push(`bearer.${config.authorization}`);\n            }\n            socket = new WebSocket(url, protocols);\n            const conversationConfig = await new Promise((resolve, reject) => {\n                socket.addEventListener(\"open\", () => {\n                    const overridesEvent = {\n                        type: \"conversation_initiation_client_data\",\n                    };\n                    if (config.overrides) {\n                        overridesEvent.conversation_config_override = {\n                            agent: {\n                                prompt: config.overrides.agent?.prompt,\n                                first_message: config.overrides.agent?.firstMessage,\n                                language: config.overrides.agent?.language,\n                            },\n                            tts: {\n                                voice_id: config.overrides.tts?.voiceId,\n                            },\n                        };\n                    }\n                    if (config.customLlmExtraBody) {\n                        overridesEvent.custom_llm_extra_body = config.customLlmExtraBody;\n                    }\n                    socket?.send(JSON.stringify(overridesEvent));\n                }, { once: true });\n                socket.addEventListener(\"error\", reject);\n                socket.addEventListener(\"close\", reject);\n                socket.addEventListener(\"message\", (event) => {\n                    const message = JSON.parse(event.data);\n                    if (!isValidSocketEvent(message)) {\n                        return;\n                    }\n                    if (message.type === \"conversation_initiation_metadata\") {\n                        resolve(message.conversation_initiation_metadata_event);\n                    }\n                    else {\n                        console.warn(\"First received message is not conversation metadata.\");\n                    }\n                }, { once: true });\n            });\n            const { conversation_id, agent_output_audio_format, user_input_audio_format, } = conversationConfig;\n            const inputFormat = parseFormat(user_input_audio_format ?? \"pcm_16000\");\n            const outputFormat = parseFormat(agent_output_audio_format);\n            return new Connection(socket, conversation_id, inputFormat, outputFormat);\n        }\n        catch (error) {\n            socket?.close();\n            throw error;\n        }\n    }\n    constructor(socket, conversationId, inputFormat, outputFormat) {\n        this.socket = socket;\n        this.conversationId = conversationId;\n        this.inputFormat = inputFormat;\n        this.outputFormat = outputFormat;\n    }\n    close() {\n        this.socket.close();\n    }\n    sendMessage(message) {\n        this.socket.send(JSON.stringify(message));\n    }\n}\nfunction parseFormat(format) {\n    const [formatPart, sampleRatePart] = format.split(\"_\");\n    if (![\"pcm\", \"ulaw\"].includes(formatPart)) {\n        throw new Error(`Invalid format: ${format}`);\n    }\n    const sampleRate = parseInt(sampleRatePart);\n    if (isNaN(sampleRate)) {\n        throw new Error(`Invalid sample rate: ${sampleRatePart}`);\n    }\n    return {\n        format: formatPart,\n        sampleRate,\n    };\n}\n//# sourceMappingURL=connection.js.map","references":["/Users/aleksai/Desktop/ /projects/elevenlabs-client/src/utils/events.ts"],"map":"{\"version\":3,\"file\":\"connection.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/utils/connection.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/aleksai/Desktop/ /projects/elevenlabs-client/dist/utils/connection.d.ts","writeByteOrderMark":false,"text":"import { OutgoingSocketEvent } from \"./events\";\nexport type Language = \"en\" | \"ja\" | \"zh\" | \"de\" | \"hi\" | \"fr\" | \"ko\" | \"pt\" | \"it\" | \"es\" | \"id\" | \"nl\" | \"tr\" | \"pl\" | \"sv\" | \"bg\" | \"ro\" | \"ar\" | \"cs\" | \"el\" | \"fi\" | \"ms\" | \"da\" | \"ta\" | \"uk\" | \"ru\" | \"hu\" | \"no\" | \"vi\";\nexport type SessionConfig = {\n    origin?: string;\n    authorization?: string;\n    overrides?: {\n        agent?: {\n            prompt?: {\n                prompt?: string;\n            };\n            firstMessage?: string;\n            language?: Language;\n        };\n        tts?: {\n            voiceId?: string;\n        };\n    };\n    customLlmExtraBody?: any;\n} & ({\n    signedUrl: string;\n    agentId?: undefined;\n} | {\n    agentId: string;\n    signedUrl?: undefined;\n});\nexport type FormatConfig = {\n    format: \"pcm\" | \"ulaw\";\n    sampleRate: number;\n};\nexport declare class Connection {\n    readonly socket: WebSocket;\n    readonly conversationId: string;\n    readonly inputFormat: FormatConfig;\n    readonly outputFormat: FormatConfig;\n    static create(config: SessionConfig): Promise<Connection>;\n    private constructor();\n    close(): void;\n    sendMessage(message: OutgoingSocketEvent): void;\n}\n"}}
