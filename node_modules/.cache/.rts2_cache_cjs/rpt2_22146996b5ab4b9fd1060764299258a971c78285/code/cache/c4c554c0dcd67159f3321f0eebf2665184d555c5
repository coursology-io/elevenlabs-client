{"code":"import { arrayBufferToBase64, base64ToArrayBuffer } from \"./utils/audio\";\nimport { Input } from \"./utils/input\";\nimport { Output } from \"./utils/output\";\nimport { Connection } from \"./utils/connection\";\nimport { isValidSocketEvent, } from \"./utils/events\";\nconst defaultClientTools = { clientTools: {} };\nconst defaultCallbacks = {\n    onConnect: () => { },\n    onDebug: () => { },\n    onDisconnect: () => { },\n    onError: () => { },\n    onMessage: () => { },\n    onModeChange: () => { },\n    onStatusChange: () => { },\n    onCanSendFeedbackChange: () => { },\n};\nconst HTTPS_API_ORIGIN = \"https://api.elevenlabs.io\";\nexport class Conversation {\n    options;\n    connection;\n    input;\n    output;\n    static async startSession(options) {\n        const fullOptions = {\n            ...defaultClientTools,\n            ...defaultCallbacks,\n            ...options,\n        };\n        fullOptions.onStatusChange({ status: \"connecting\" });\n        fullOptions.onCanSendFeedbackChange({ canSendFeedback: false });\n        let input = null;\n        let connection = null;\n        let output = null;\n        try {\n            connection = await Connection.create(options);\n            [input, output] = await Promise.all([\n                Input.create({\n                    ...connection.inputFormat,\n                    preferHeadphonesForIosDevices: options.preferHeadphonesForIosDevices,\n                }),\n                Output.create(connection.outputFormat),\n            ]);\n            return new Conversation(fullOptions, connection, input, output);\n        }\n        catch (error) {\n            fullOptions.onStatusChange({ status: \"disconnected\" });\n            connection?.close();\n            await input?.close();\n            await output?.close();\n            throw error;\n        }\n    }\n    lastInterruptTimestamp = 0;\n    mode = \"listening\";\n    status = \"connecting\";\n    inputFrequencyData;\n    outputFrequencyData;\n    volume = 1;\n    currentEventId = 1;\n    lastFeedbackEventId = 1;\n    canSendFeedback = false;\n    isMuted = false;\n    constructor(options, connection, input, output) {\n        this.options = options;\n        this.connection = connection;\n        this.input = input;\n        this.output = output;\n        this.options.onConnect({ conversationId: connection.conversationId });\n        this.connection.socket.addEventListener(\"message\", (event) => {\n            this.onEvent(event);\n        });\n        this.connection.socket.addEventListener(\"error\", (event) => {\n            this.updateStatus(\"disconnected\");\n            this.onError(\"Socket error\", event);\n        });\n        this.connection.socket.addEventListener(\"close\", () => {\n            this.updateStatus(\"disconnected\");\n            this.options.onDisconnect();\n        });\n        this.input.worklet.port.onmessage = this.onInputWorkletMessage;\n        this.output.worklet.port.onmessage = this.onOutputWorkletMessage;\n        this.updateStatus(\"connected\");\n    }\n    endSession = async () => {\n        if (this.status !== \"connected\")\n            return;\n        this.updateStatus(\"disconnecting\");\n        this.connection.close();\n        await this.input.close();\n        await this.output.close();\n        this.updateStatus(\"disconnected\");\n    };\n    updateMode = (mode) => {\n        if (mode !== this.mode) {\n            this.mode = mode;\n            this.options.onModeChange({ mode });\n        }\n    };\n    updateStatus = (status) => {\n        if (status !== this.status) {\n            this.status = status;\n            this.options.onStatusChange({ status });\n        }\n    };\n    updateCanSendFeedback = () => {\n        const canSendFeedback = this.currentEventId !== this.lastFeedbackEventId;\n        if (this.canSendFeedback !== canSendFeedback) {\n            this.canSendFeedback = canSendFeedback;\n            this.options.onCanSendFeedbackChange({ canSendFeedback });\n        }\n    };\n    onEvent = async (event) => {\n        try {\n            const parsedEvent = JSON.parse(event.data);\n            if (!isValidSocketEvent(parsedEvent)) {\n                return;\n            }\n            switch (parsedEvent.type) {\n                case \"interruption\": {\n                    if (parsedEvent.interruption_event) {\n                        this.lastInterruptTimestamp =\n                            parsedEvent.interruption_event.event_id;\n                    }\n                    this.fadeOutAudio();\n                    break;\n                }\n                case \"agent_response\": {\n                    this.options.onMessage({\n                        source: \"ai\",\n                        message: parsedEvent.agent_response_event.agent_response,\n                    });\n                    break;\n                }\n                case \"user_transcript\": {\n                    this.options.onMessage({\n                        source: \"user\",\n                        message: parsedEvent.user_transcription_event.user_transcript,\n                    });\n                    break;\n                }\n                case \"internal_tentative_agent_response\": {\n                    this.options.onDebug({\n                        type: \"tentative_agent_response\",\n                        response: parsedEvent.tentative_agent_response_internal_event\n                            .tentative_agent_response,\n                    });\n                    break;\n                }\n                case \"client_tool_call\": {\n                    if (this.options.clientTools.hasOwnProperty(parsedEvent.client_tool_call.tool_name)) {\n                        try {\n                            const result = (await this.options.clientTools[parsedEvent.client_tool_call.tool_name](parsedEvent.client_tool_call.parameters)) ??\n                                \"Client tool execution successful.\"; // default client-tool call response\n                            this.connection.sendMessage({\n                                type: \"client_tool_result\",\n                                tool_call_id: parsedEvent.client_tool_call.tool_call_id,\n                                result: result,\n                                is_error: false,\n                            });\n                        }\n                        catch (e) {\n                            this.onError(\"Client tool execution failed with following error: \" +\n                                e?.message, {\n                                clientToolName: parsedEvent.client_tool_call.tool_name,\n                            });\n                            this.connection.sendMessage({\n                                type: \"client_tool_result\",\n                                tool_call_id: parsedEvent.client_tool_call.tool_call_id,\n                                result: \"Client tool execution failed: \" + e?.message,\n                                is_error: true,\n                            });\n                        }\n                        break;\n                    }\n                    if (this.options.onUnhandledClientToolCall) {\n                        this.options.onUnhandledClientToolCall(parsedEvent.client_tool_call);\n                        break;\n                    }\n                    this.onError(`Client tool with name ${parsedEvent.client_tool_call.tool_name} is not defined on client`, {\n                        clientToolName: parsedEvent.client_tool_call.tool_name,\n                    });\n                    this.connection.sendMessage({\n                        type: \"client_tool_result\",\n                        tool_call_id: parsedEvent.client_tool_call.tool_call_id,\n                        result: `Client tool with name ${parsedEvent.client_tool_call.tool_name} is not defined on client`,\n                        is_error: true,\n                    });\n                    break;\n                }\n                case \"audio\": {\n                    if (this.lastInterruptTimestamp <= parsedEvent.audio_event.event_id) {\n                        this.addAudioBase64Chunk(parsedEvent.audio_event.audio_base_64);\n                        this.currentEventId = parsedEvent.audio_event.event_id;\n                        this.updateCanSendFeedback();\n                        this.updateMode(\"speaking\");\n                    }\n                    break;\n                }\n                case \"ping\": {\n                    this.connection.sendMessage({\n                        type: \"pong\",\n                        event_id: parsedEvent.ping_event.event_id,\n                    });\n                    // parsedEvent.ping_event.ping_ms can be used on client side, for example\n                    // to warn if ping is too high that experience might be degraded.\n                    break;\n                }\n                // unhandled events are expected to be internal events\n                default: {\n                    this.options.onDebug(parsedEvent);\n                    break;\n                }\n            }\n        }\n        catch {\n            this.onError(\"Failed to parse event data\", { event });\n            return;\n        }\n    };\n    onInputWorkletMessage = (event) => {\n        const rawAudioPcmData = event.data[0];\n        const maxVolume = event.data[1];\n        // check if the sound was loud enough, so we don't send unnecessary chunks\n        // then forward audio to websocket\n        //if (maxVolume > 0.001) {\n        if (this.status === \"connected\" && !this.isMuted) {\n            this.connection.sendMessage({\n                user_audio_chunk: arrayBufferToBase64(rawAudioPcmData.buffer),\n                //sample_rate: this.inputAudioContext?.inputSampleRate || this.inputSampleRate,\n            });\n        }\n        //}\n    };\n    onOutputWorkletMessage = ({ data }) => {\n        if (data.type === \"process\") {\n            this.updateMode(data.finished ? \"listening\" : \"speaking\");\n        }\n    };\n    addAudioBase64Chunk = async (chunk) => {\n        this.output.gain.gain.value = this.volume;\n        this.output.worklet.port.postMessage({ type: \"clearInterrupted\" });\n        this.output.worklet.port.postMessage({\n            type: \"buffer\",\n            buffer: base64ToArrayBuffer(chunk),\n        });\n    };\n    fadeOutAudio = async () => {\n        // mute agent\n        this.updateMode(\"listening\");\n        this.output.worklet.port.postMessage({ type: \"interrupt\" });\n        this.output.gain.gain.exponentialRampToValueAtTime(0.0001, this.output.context.currentTime + 2);\n        // reset volume back\n        setTimeout(() => {\n            this.output.gain.gain.value = this.volume;\n            this.output.worklet.port.postMessage({ type: \"clearInterrupted\" });\n        }, 2000); // Adjust the duration as needed\n    };\n    onError = (message, context) => {\n        console.error(message, context);\n        this.options.onError(message, context);\n    };\n    calculateVolume = (frequencyData) => {\n        if (frequencyData.length === 0) {\n            return 0;\n        }\n        // TODO: Currently this averages all frequencies, but we should probably\n        // bias towards the frequencies that are more typical for human voice\n        let volume = 0;\n        for (let i = 0; i < frequencyData.length; i++) {\n            volume += frequencyData[i] / 255;\n        }\n        volume /= frequencyData.length;\n        return volume < 0 ? 0 : volume > 1 ? 1 : volume;\n    };\n    getId = () => this.connection.conversationId;\n    setVolume = ({ volume }) => {\n        this.volume = volume;\n    };\n    getInputByteFrequencyData = () => {\n        this.inputFrequencyData ??= new Uint8Array(this.input.analyser.frequencyBinCount);\n        this.input.analyser.getByteFrequencyData(this.inputFrequencyData);\n        return this.inputFrequencyData;\n    };\n    getOutputByteFrequencyData = () => {\n        this.outputFrequencyData ??= new Uint8Array(this.output.analyser.frequencyBinCount);\n        this.output.analyser.getByteFrequencyData(this.outputFrequencyData);\n        return this.outputFrequencyData;\n    };\n    getInputVolume = () => {\n        return this.calculateVolume(this.getInputByteFrequencyData());\n    };\n    getOutputVolume = () => {\n        return this.calculateVolume(this.getOutputByteFrequencyData());\n    };\n    sendFeedback = (like) => {\n        if (!this.canSendFeedback) {\n            console.warn(this.lastFeedbackEventId === 0\n                ? \"Cannot send feedback: the conversation has not started yet.\"\n                : \"Cannot send feedback: feedback has already been sent for the current response.\");\n            return;\n        }\n        this.connection.sendMessage({\n            type: \"feedback\",\n            score: like ? \"like\" : \"dislike\",\n            event_id: this.currentEventId,\n        });\n        this.lastFeedbackEventId = this.currentEventId;\n        this.updateCanSendFeedback();\n    };\n    interrupt = () => {\n        return this.fadeOutAudio();\n    };\n}\nexport function postOverallFeedback(conversationId, like, origin = HTTPS_API_ORIGIN) {\n    return fetch(`${origin}/v1/convai/conversations/${conversationId}/feedback`, {\n        method: \"POST\",\n        body: JSON.stringify({\n            feedback: like ? \"like\" : \"dislike\",\n        }),\n        headers: {\n            \"Content-Type\": \"application/json\",\n        },\n    });\n}\n//# sourceMappingURL=index.js.map","references":["/Users/aleksai/Desktop/ /projects/elevenlabs-client/src/utils/audio.ts","/Users/aleksai/Desktop/ /projects/elevenlabs-client/src/utils/input.ts","/Users/aleksai/Desktop/ /projects/elevenlabs-client/src/utils/output.ts","/Users/aleksai/Desktop/ /projects/elevenlabs-client/src/utils/connection.ts","/Users/aleksai/Desktop/ /projects/elevenlabs-client/src/utils/events.ts","/Users/aleksai/Desktop/ /projects/elevenlabs-client/src/utils/events.ts","/Users/aleksai/Desktop/ /projects/elevenlabs-client/src/utils/connection.ts"],"map":"{\"version\":3,\"file\":\"index.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../src/index.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/aleksai/Desktop/ /projects/elevenlabs-client/dist/index.d.ts","writeByteOrderMark":false,"text":"import { Input, InputConfig } from \"./utils/input\";\nimport { Output } from \"./utils/output\";\nimport { SessionConfig } from \"./utils/connection\";\nimport { ClientToolCallEvent } from \"./utils/events\";\nexport type { IncomingSocketEvent } from \"./utils/events\";\nexport type { SessionConfig } from \"./utils/connection\";\nexport type Role = \"user\" | \"ai\";\nexport type Mode = \"speaking\" | \"listening\";\nexport type Status = \"connecting\" | \"connected\" | \"disconnecting\" | \"disconnected\";\nexport type Options = SessionConfig & Callbacks & ClientToolsConfig & InputConfig;\nexport type ClientToolsConfig = {\n    clientTools: Record<string, (parameters: any) => Promise<string | number | void> | string | number | void>;\n};\nexport type Callbacks = {\n    onConnect: (props: {\n        conversationId: string;\n    }) => void;\n    onDebug: (props: any) => void;\n    onDisconnect: () => void;\n    onError: (message: string, context?: any) => void;\n    onMessage: (props: {\n        message: string;\n        source: Role;\n    }) => void;\n    onModeChange: (prop: {\n        mode: Mode;\n    }) => void;\n    onStatusChange: (prop: {\n        status: Status;\n    }) => void;\n    onCanSendFeedbackChange: (prop: {\n        canSendFeedback: boolean;\n    }) => void;\n    onUnhandledClientToolCall?: (params: ClientToolCallEvent[\"client_tool_call\"]) => void;\n};\nexport declare class Conversation {\n    private readonly options;\n    private readonly connection;\n    readonly input: Input;\n    readonly output: Output;\n    static startSession(options: SessionConfig & Partial<Callbacks> & Partial<ClientToolsConfig> & Partial<InputConfig>): Promise<Conversation>;\n    private lastInterruptTimestamp;\n    private mode;\n    private status;\n    private inputFrequencyData?;\n    private outputFrequencyData?;\n    private volume;\n    private currentEventId;\n    private lastFeedbackEventId;\n    private canSendFeedback;\n    isMuted: boolean;\n    private constructor();\n    endSession: () => Promise<void>;\n    private updateMode;\n    private updateStatus;\n    private updateCanSendFeedback;\n    private onEvent;\n    private onInputWorkletMessage;\n    private onOutputWorkletMessage;\n    private addAudioBase64Chunk;\n    private fadeOutAudio;\n    private onError;\n    private calculateVolume;\n    getId: () => string;\n    setVolume: ({ volume }: {\n        volume: number;\n    }) => void;\n    getInputByteFrequencyData: () => Uint8Array<ArrayBufferLike>;\n    getOutputByteFrequencyData: () => Uint8Array<ArrayBufferLike>;\n    getInputVolume: () => number;\n    getOutputVolume: () => number;\n    sendFeedback: (like: boolean) => void;\n    interrupt: () => Promise<void>;\n}\nexport declare function postOverallFeedback(conversationId: string, like: boolean, origin?: string): Promise<Response>;\n"}}
