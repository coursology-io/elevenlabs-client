{"version":3,"file":"lib.modern.js","sources":["../src/utils/audio.ts","../src/utils/rawAudioProcessor.ts","../src/utils/input.ts","../src/utils/audioConcatProcessor.ts","../src/utils/output.ts","../src/utils/events.ts","../src/utils/connection.ts","../src/index.ts"],"sourcesContent":["export function arrayBufferToBase64(b: ArrayBufferLike) {\n  const buffer = new Uint8Array(b);\n  // @ts-ignore\n  const base64Data = window.btoa(String.fromCharCode(...buffer));\n  return base64Data;\n}\n\nexport function base64ToArrayBuffer(base64: string): ArrayBuffer {\n  const binaryString = window.atob(base64);\n  const len = binaryString.length;\n  const bytes = new Uint8Array(len);\n  for (let i = 0; i < len; i++) {\n    bytes[i] = binaryString.charCodeAt(i);\n  }\n  return bytes.buffer;\n}\n","/*\n * ulaw encoding logic taken from the wavefile library\n * https://github.com/rochars/wavefile/blob/master/lib/codecs/mulaw.js\n */\n\nconst blob = new Blob(\n  [\n    // language=JavaScript\n    `\n      const BIAS = 0x84;\n      const CLIP = 32635;\n      const encodeTable = [\n        0,0,1,1,2,2,2,2,3,3,3,3,3,3,3,3,\n        4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,\n        5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,\n        5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,\n        6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,\n        6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,\n        6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,\n        6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,\n        7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\n        7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\n        7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\n        7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\n        7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\n        7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\n        7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\n        7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7\n      ];\n      \n      function encodeSample(sample) {\n        let sign;\n        let exponent;\n        let mantissa;\n        let muLawSample;\n        sign = (sample >> 8) & 0x80;\n        if (sign !== 0) sample = -sample;\n        sample = sample + BIAS;\n        if (sample > CLIP) sample = CLIP;\n        exponent = encodeTable[(sample>>7) & 0xFF];\n        mantissa = (sample >> (exponent+3)) & 0x0F;\n        muLawSample = ~(sign | (exponent << 4) | mantissa);\n        \n        return muLawSample;\n      }\n    \n      class RawAudioProcessor extends AudioWorkletProcessor {\n        constructor() {\n          super();\n                    \n          this.port.onmessage = ({ data }) => {\n            this.buffer = []; // Initialize an empty buffer\n            this.bufferSize = data.sampleRate / 4;\n            \n            if (globalThis.LibSampleRate && sampleRate !== data.sampleRate) {\n              globalThis.LibSampleRate.create(1, sampleRate, data.sampleRate).then(resampler => {\n                this.resampler = resampler;\n              });\n            } \n          };\n        }\n        process(inputs) {\n          if (!this.buffer) {\n            return true;\n          }\n          \n          const input = inputs[0]; // Get the first input node\n          if (input.length > 0) {\n            let channelData = input[0]; // Get the first channel's data\n\n            // Resample the audio if necessary\n            if (this.resampler) {\n              channelData = this.resampler.full(channelData);\n            }\n\n            // Add channel data to the buffer\n            this.buffer.push(...channelData);\n            // Get max volume \n            let sum = 0.0;\n            for (let i = 0; i < channelData.length; i++) {\n              sum += channelData[i] * channelData[i];\n            }\n            const maxVolume = Math.sqrt(sum / channelData.length);\n            // Check if buffer size has reached or exceeded the threshold\n            if (this.buffer.length >= this.bufferSize) {\n              const float32Array = new Float32Array(this.buffer)\n              let encodedArray = this.format === \"ulaw\"\n                ? new Uint8Array(float32Array.length)\n                : new Int16Array(float32Array.length);\n\n              // Iterate through the Float32Array and convert each sample to PCM16\n              for (let i = 0; i < float32Array.length; i++) {\n                // Clamp the value to the range [-1, 1]\n                let sample = Math.max(-1, Math.min(1, float32Array[i]));\n\n                // Scale the sample to the range [-32768, 32767]\n                let value = sample < 0 ? sample * 32768 : sample * 32767;\n                if (this.format === \"ulaw\") {\n                  value = encodeSample(Math.round(value));\n                }\n\n                encodedArray[i] = value;\n              }\n\n              // Send the buffered data to the main script\n              this.port.postMessage([encodedArray, maxVolume]);\n\n              // Clear the buffer after sending\n              this.buffer = [];\n            }\n          }\n          return true; // Continue processing\n        }\n      }\n      registerProcessor(\"raw-audio-processor\", RawAudioProcessor);\n  `,\n  ],\n  { type: \"application/javascript\" }\n);\n\nexport const rawAudioProcessor = URL.createObjectURL(blob);\n","import { rawAudioProcessor } from \"./rawAudioProcessor\";\nimport { FormatConfig } from \"./connection\";\n\nexport type InputConfig = {\n  preferHeadphonesForIosDevices?: boolean;\n};\n\nconst LIBSAMPLERATE_JS =\n  \"https://cdn.jsdelivr.net/npm/@alexanderolsen/libsamplerate-js@2.1.2/dist/libsamplerate.worklet.js\";\n\nfunction isIosDevice() {\n  return (\n    [\n      \"iPad Simulator\",\n      \"iPhone Simulator\",\n      \"iPod Simulator\",\n      \"iPad\",\n      \"iPhone\",\n      \"iPod\",\n    ].includes(navigator.platform) ||\n    // iPad on iOS 13 detection\n    (navigator.userAgent.includes(\"Mac\") && \"ontouchend\" in document)\n  );\n}\n\nexport class Input {\n  public static async create({\n    sampleRate,\n    format,\n    preferHeadphonesForIosDevices,\n  }: FormatConfig & InputConfig): Promise<Input> {\n    let context: AudioContext | null = null;\n    let inputStream: MediaStream | null = null;\n\n    try {\n      const options: MediaTrackConstraints = {\n        sampleRate: { ideal: sampleRate },\n        echoCancellation: { ideal: true },\n        noiseSuppression: { ideal: true },\n      };\n\n      // some browsers won't allow calling getSupportedConstraints or enumerateDevices\n      // before getting approval for microphone access\n      const preliminaryInputStream = await navigator.mediaDevices.getUserMedia({\n        audio: true,\n      });\n      preliminaryInputStream?.getTracks().forEach(track => track.stop());\n\n      if (isIosDevice() && preferHeadphonesForIosDevices) {\n        const availableDevices =\n          await window.navigator.mediaDevices.enumerateDevices();\n        const idealDevice = availableDevices.find(\n          d =>\n            // cautious to include \"bluetooth\" in the search\n            // as might trigger bluetooth speakers\n            d.kind === \"audioinput\" &&\n            [\"airpod\", \"headphone\", \"earphone\"].find(keyword =>\n              d.label.toLowerCase().includes(keyword)\n            )\n        );\n        if (idealDevice) {\n          options.deviceId = { ideal: idealDevice.deviceId };\n        }\n      }\n\n      const supportsSampleRateConstraint =\n        navigator.mediaDevices.getSupportedConstraints().sampleRate;\n\n      context = new window.AudioContext(\n        supportsSampleRateConstraint ? { sampleRate } : {}\n      );\n      const analyser = context.createAnalyser();\n      if (!supportsSampleRateConstraint) {\n        await context.audioWorklet.addModule(LIBSAMPLERATE_JS);\n      }\n      await context.audioWorklet.addModule(rawAudioProcessor);\n\n      inputStream = await navigator.mediaDevices.getUserMedia({\n        audio: options,\n      });\n\n      const source = context.createMediaStreamSource(inputStream);\n      const worklet = new AudioWorkletNode(context, \"raw-audio-processor\");\n      worklet.port.postMessage({ type: \"setFormat\", format, sampleRate });\n\n      source.connect(analyser);\n      analyser.connect(worklet);\n\n      return new Input(context, analyser, worklet, inputStream);\n    } catch (error) {\n      inputStream?.getTracks().forEach(track => track.stop());\n      context?.close();\n      throw error;\n    }\n  }\n\n  private constructor(\n    public readonly context: AudioContext,\n    public readonly analyser: AnalyserNode,\n    public readonly worklet: AudioWorkletNode,\n    public readonly inputStream: MediaStream\n  ) {}\n\n  public async close() {\n    this.inputStream.getTracks().forEach(track => track.stop());\n    await this.context.close();\n  }\n}\n","/*\n * ulaw decoding logic taken from the wavefile library\n * https://github.com/rochars/wavefile/blob/master/lib/codecs/mulaw.js\n */\n\nconst blob = new Blob(\n  [\n    // language=JavaScript\n    `\n      const decodeTable = [0,132,396,924,1980,4092,8316,16764];\n      \n      export function decodeSample(muLawSample) {\n        let sign;\n        let exponent;\n        let mantissa;\n        let sample;\n        muLawSample = ~muLawSample;\n        sign = (muLawSample & 0x80);\n        exponent = (muLawSample >> 4) & 0x07;\n        mantissa = muLawSample & 0x0F;\n        sample = decodeTable[exponent] + (mantissa << (exponent+3));\n        if (sign !== 0) sample = -sample;\n\n        return sample;\n      }\n      \n      class AudioConcatProcessor extends AudioWorkletProcessor {\n        constructor() {\n          super();\n          this.buffers = []; // Initialize an empty buffer\n          this.cursor = 0;\n          this.currentBuffer = null;\n          this.wasInterrupted = false;\n          this.finished = false;\n          \n          this.port.onmessage = ({ data }) => {\n            switch (data.type) {\n              case \"setFormat\":\n                this.format = data.format;\n                break;\n              case \"buffer\":\n                this.wasInterrupted = false;\n                this.buffers.push(\n                  this.format === \"ulaw\"\n                    ? new Uint8Array(data.buffer)\n                    : new Int16Array(data.buffer)\n                );\n                break;\n              case \"interrupt\":\n                this.wasInterrupted = true;\n                break;\n              case \"clearInterrupted\":\n                if (this.wasInterrupted) {\n                  this.wasInterrupted = false;\n                  this.buffers = [];\n                  this.currentBuffer = null;\n                }\n            }\n          };\n        }\n        process(_, outputs) {\n          let finished = false;\n          const output = outputs[0][0];\n          for (let i = 0; i < output.length; i++) {\n            if (!this.currentBuffer) {\n              if (this.buffers.length === 0) {\n                finished = true;\n                break;\n              }\n              this.currentBuffer = this.buffers.shift();\n              this.cursor = 0;\n            }\n\n            let value = this.currentBuffer[this.cursor];\n            if (this.format === \"ulaw\") {\n              value = decodeSample(value);\n            }\n            output[i] = value / 32768;\n            this.cursor++;\n\n            if (this.cursor >= this.currentBuffer.length) {\n              this.currentBuffer = null;\n            }\n          }\n\n          if (this.finished !== finished) {\n            this.finished = finished;\n            this.port.postMessage({ type: \"process\", finished });\n          }\n\n          return true; // Continue processing\n        }\n      }\n\n      registerProcessor(\"audio-concat-processor\", AudioConcatProcessor);\n    `,\n  ],\n  { type: \"application/javascript\" }\n);\n\nexport const audioConcatProcessor = URL.createObjectURL(blob);\n","import { audioConcatProcessor } from \"./audioConcatProcessor\";\nimport { FormatConfig } from \"./connection\";\n\nexport class Output {\n  public static async create({\n    sampleRate,\n    format,\n  }: FormatConfig): Promise<Output> {\n    let context: AudioContext | null = null;\n    try {\n      context = new AudioContext({ sampleRate });\n      const analyser = context.createAnalyser();\n      const gain = context.createGain();\n      gain.connect(analyser);\n      analyser.connect(context.destination);\n      await context.audioWorklet.addModule(audioConcatProcessor);\n      const worklet = new AudioWorkletNode(context, \"audio-concat-processor\");\n      worklet.port.postMessage({ type: \"setFormat\", format });\n      worklet.connect(gain);\n\n      return new Output(context, analyser, gain, worklet);\n    } catch (error) {\n      context?.close();\n      throw error;\n    }\n  }\n\n  private constructor(\n    public readonly context: AudioContext,\n    public readonly analyser: AnalyserNode,\n    public readonly gain: GainNode,\n    public readonly worklet: AudioWorkletNode\n  ) {}\n\n  public async close() {\n    await this.context.close();\n  }\n}\n","import { Language } from \"./connection\";\n\nexport type UserTranscriptionEvent = {\n  type: \"user_transcript\";\n  user_transcription_event: { user_transcript: string };\n};\nexport type AgentResponseEvent = {\n  type: \"agent_response\";\n  agent_response_event: { agent_response: string };\n};\nexport type AgentAudioEvent = {\n  type: \"audio\";\n  audio_event: {\n    audio_base_64: string;\n    event_id: number;\n  };\n};\nexport type InterruptionEvent = {\n  type: \"interruption\";\n  interruption_event: {\n    event_id: number;\n  };\n};\nexport type InternalTentativeAgentResponseEvent = {\n  type: \"internal_tentative_agent_response\";\n  tentative_agent_response_internal_event: {\n    tentative_agent_response: string;\n  };\n};\nexport type ConfigEvent = {\n  type: \"conversation_initiation_metadata\";\n  conversation_initiation_metadata_event: {\n    conversation_id: string;\n    agent_output_audio_format: string;\n    user_input_audio_format?: string;\n  };\n};\nexport type PingEvent = {\n  type: \"ping\";\n  ping_event: {\n    event_id: number;\n    ping_ms?: number;\n  };\n};\nexport type ClientToolCallEvent = {\n  type: \"client_tool_call\";\n  client_tool_call: {\n    tool_name: string;\n    tool_call_id: string;\n    parameters: any;\n    expects_response: boolean;\n  };\n};\n\n// TODO correction missing\nexport type IncomingSocketEvent =\n  | UserTranscriptionEvent\n  | AgentResponseEvent\n  | AgentAudioEvent\n  | InterruptionEvent\n  | InternalTentativeAgentResponseEvent\n  | ConfigEvent\n  | PingEvent\n  | ClientToolCallEvent;\n\nexport type PongEvent = {\n  type: \"pong\";\n  event_id: number;\n};\nexport type UserAudioEvent = {\n  user_audio_chunk: string;\n};\nexport type UserFeedbackEvent = {\n  type: \"feedback\";\n  score: \"like\" | \"dislike\";\n  event_id: number;\n};\nexport type ClientToolResultEvent = {\n  type: \"client_tool_result\";\n  tool_call_id: string;\n  result: any;\n  is_error: boolean;\n};\nexport type InitiationClientDataEvent = {\n  type: \"conversation_initiation_client_data\";\n  conversation_config_override?: {\n    agent?: {\n      prompt?: {\n        prompt?: string;\n      };\n      first_message?: string;\n      language?: Language;\n    };\n    tts?: {\n      voice_id?: string;\n    };\n  };\n  custom_llm_extra_body?: any;\n};\nexport type OutgoingSocketEvent =\n  | PongEvent\n  | UserAudioEvent\n  | InitiationClientDataEvent\n  | UserFeedbackEvent\n  | ClientToolResultEvent;\n\nexport function isValidSocketEvent(event: any): event is IncomingSocketEvent {\n  return !!event.type;\n}\n","import {\n  InitiationClientDataEvent,\n  ConfigEvent,\n  isValidSocketEvent,\n  OutgoingSocketEvent,\n} from \"./events\";\n\nconst MAIN_PROTOCOL = \"convai\";\n\nexport type Language =\n  | \"en\"\n  | \"ja\"\n  | \"zh\"\n  | \"de\"\n  | \"hi\"\n  | \"fr\"\n  | \"ko\"\n  | \"pt\"\n  | \"it\"\n  | \"es\"\n  | \"id\"\n  | \"nl\"\n  | \"tr\"\n  | \"pl\"\n  | \"sv\"\n  | \"bg\"\n  | \"ro\"\n  | \"ar\"\n  | \"cs\"\n  | \"el\"\n  | \"fi\"\n  | \"ms\"\n  | \"da\"\n  | \"ta\"\n  | \"uk\"\n  | \"ru\"\n  | \"hu\"\n  | \"no\"\n  | \"vi\";\nexport type SessionConfig = {\n  origin?: string;\n  authorization?: string;\n  overrides?: {\n    agent?: {\n      prompt?: {\n        prompt?: string;\n      };\n      firstMessage?: string;\n      language?: Language;\n    };\n    tts?: {\n      voiceId?: string;\n    };\n  };\n  customLlmExtraBody?: any;\n} & (\n  | { signedUrl: string; agentId?: undefined }\n  | { agentId: string; signedUrl?: undefined }\n);\nexport type FormatConfig = {\n  format: \"pcm\" | \"ulaw\";\n  sampleRate: number;\n};\n\nconst WSS_API_ORIGIN = \"wss://api.elevenlabs.io\";\nconst WSS_API_PATHNAME = \"/v1/convai/conversation?agent_id=\";\n\nexport class Connection {\n  public static async create(config: SessionConfig): Promise<Connection> {\n    let socket: WebSocket | null = null;\n\n    try {\n      const origin = config.origin ?? WSS_API_ORIGIN;\n      const url = config.signedUrl\n        ? config.signedUrl\n        : origin + WSS_API_PATHNAME + config.agentId;\n\n      const protocols = [MAIN_PROTOCOL];\n      if (config.authorization) {\n        protocols.push(`bearer.${config.authorization}`);\n      }\n      socket = new WebSocket(url, protocols);\n      const conversationConfig = await new Promise<\n        ConfigEvent[\"conversation_initiation_metadata_event\"]\n      >((resolve, reject) => {\n        socket!.addEventListener(\n          \"open\",\n          () => {\n            const overridesEvent: InitiationClientDataEvent = {\n              type: \"conversation_initiation_client_data\",\n            };\n\n            if (config.overrides) {\n              overridesEvent.conversation_config_override = {\n                agent: {\n                  prompt: config.overrides.agent?.prompt,\n                  first_message: config.overrides.agent?.firstMessage,\n                  language: config.overrides.agent?.language,\n                },\n                tts: {\n                  voice_id: config.overrides.tts?.voiceId,\n                },\n              };\n            }\n\n            if (config.customLlmExtraBody) {\n              overridesEvent.custom_llm_extra_body = config.customLlmExtraBody;\n            }\n\n            socket?.send(JSON.stringify(overridesEvent));\n          },\n          { once: true }\n        );\n        socket!.addEventListener(\"error\", reject);\n        socket!.addEventListener(\"close\", reject);\n        socket!.addEventListener(\n          \"message\",\n          (event: MessageEvent) => {\n            const message = JSON.parse(event.data);\n\n            if (!isValidSocketEvent(message)) {\n              return;\n            }\n\n            if (message.type === \"conversation_initiation_metadata\") {\n              resolve(message.conversation_initiation_metadata_event);\n            } else {\n              console.warn(\n                \"First received message is not conversation metadata.\"\n              );\n            }\n          },\n          { once: true }\n        );\n      });\n\n      const {\n        conversation_id,\n        agent_output_audio_format,\n        user_input_audio_format,\n      } = conversationConfig;\n\n      const inputFormat = parseFormat(user_input_audio_format ?? \"pcm_16000\");\n      const outputFormat = parseFormat(agent_output_audio_format);\n\n      return new Connection(socket, conversation_id, inputFormat, outputFormat);\n    } catch (error) {\n      socket?.close();\n      throw error;\n    }\n  }\n\n  private constructor(\n    public readonly socket: WebSocket,\n    public readonly conversationId: string,\n    public readonly inputFormat: FormatConfig,\n    public readonly outputFormat: FormatConfig\n  ) {}\n\n  public close() {\n    this.socket.close();\n  }\n\n  public sendMessage(message: OutgoingSocketEvent) {\n    this.socket.send(JSON.stringify(message));\n  }\n}\n\nfunction parseFormat(format: string): FormatConfig {\n  const [formatPart, sampleRatePart] = format.split(\"_\");\n  if (![\"pcm\", \"ulaw\"].includes(formatPart)) {\n    throw new Error(`Invalid format: ${format}`);\n  }\n\n  const sampleRate = parseInt(sampleRatePart);\n  if (isNaN(sampleRate)) {\n    throw new Error(`Invalid sample rate: ${sampleRatePart}`);\n  }\n\n  return {\n    format: formatPart as FormatConfig[\"format\"],\n    sampleRate,\n  };\n}\n","import { arrayBufferToBase64, base64ToArrayBuffer } from \"./utils/audio\";\nimport { Input, InputConfig } from \"./utils/input\";\nimport { Output } from \"./utils/output\";\nimport { Connection, SessionConfig } from \"./utils/connection\";\nimport {\n  ClientToolCallEvent,\n  isValidSocketEvent,\n  PingEvent,\n} from \"./utils/events\";\n\nexport type { IncomingSocketEvent } from \"./utils/events\";\nexport type { SessionConfig } from \"./utils/connection\";\n\nexport type Role = \"user\" | \"ai\";\nexport type Mode = \"speaking\" | \"listening\";\nexport type Status =\n  | \"connecting\"\n  | \"connected\"\n  | \"disconnecting\"\n  | \"disconnected\";\nexport type Options = SessionConfig &\n  Callbacks &\n  ClientToolsConfig &\n  InputConfig;\nexport type ClientToolsConfig = {\n  clientTools: Record<\n    string,\n    (\n      parameters: any\n    ) => Promise<string | number | void> | string | number | void\n  >;\n};\nexport type Callbacks = {\n  onConnect: (props: { conversationId: string }) => void;\n  // internal debug events, not to be used\n  onDebug: (props: any) => void;\n  onDisconnect: () => void;\n  onError: (message: string, context?: any) => void;\n  onMessage: (props: { message: string; source: Role }) => void;\n  onModeChange: (prop: { mode: Mode }) => void;\n  onStatusChange: (prop: { status: Status }) => void;\n  onCanSendFeedbackChange: (prop: { canSendFeedback: boolean }) => void;\n  onUnhandledClientToolCall?: (\n    params: ClientToolCallEvent[\"client_tool_call\"]\n  ) => void;\n};\n\nconst defaultClientTools = { clientTools: {} };\nconst defaultCallbacks: Callbacks = {\n  onConnect: () => {},\n  onDebug: () => {},\n  onDisconnect: () => {},\n  onError: () => {},\n  onMessage: () => {},\n  onModeChange: () => {},\n  onStatusChange: () => {},\n  onCanSendFeedbackChange: () => {},\n};\n\nconst HTTPS_API_ORIGIN = \"https://api.elevenlabs.io\";\n\nexport class Conversation {\n  public static async startSession(\n    options: SessionConfig &\n      Partial<Callbacks> &\n      Partial<ClientToolsConfig> &\n      Partial<InputConfig>\n  ): Promise<Conversation> {\n    const fullOptions: Options = {\n      ...defaultClientTools,\n      ...defaultCallbacks,\n      ...options,\n    };\n\n    fullOptions.onStatusChange({ status: \"connecting\" });\n    fullOptions.onCanSendFeedbackChange({ canSendFeedback: false });\n\n    let input: Input | null = null;\n    let connection: Connection | null = null;\n    let output: Output | null = null;\n\n    try {\n      connection = await Connection.create(options);\n      [input, output] = await Promise.all([\n        Input.create({\n          ...connection.inputFormat,\n          preferHeadphonesForIosDevices: options.preferHeadphonesForIosDevices,\n        }),\n        Output.create(connection.outputFormat),\n      ]);\n\n      return new Conversation(fullOptions, connection, input, output);\n    } catch (error) {\n      fullOptions.onStatusChange({ status: \"disconnected\" });\n      connection?.close();\n      await input?.close();\n      await output?.close();\n      throw error;\n    }\n  }\n\n  private lastInterruptTimestamp: number = 0;\n  private mode: Mode = \"listening\";\n  private status: Status = \"connecting\";\n  private inputFrequencyData?: Uint8Array;\n  private outputFrequencyData?: Uint8Array;\n  private volume: number = 1;\n  private currentEventId: number = 1;\n  private lastFeedbackEventId: number = 1;\n  private canSendFeedback: boolean = false;\n\n  private constructor(\n    private readonly options: Options,\n    private readonly connection: Connection,\n    public readonly input: Input,\n    public readonly output: Output\n  ) {\n    this.options.onConnect({ conversationId: connection.conversationId });\n\n    this.connection.socket.addEventListener(\"message\", (event) => {\n      this.onEvent(event);\n    });\n    this.connection.socket.addEventListener(\"error\", (event) => {\n      this.updateStatus(\"disconnected\");\n      this.onError(\"Socket error\", event);\n    });\n    this.connection.socket.addEventListener(\"close\", () => {\n      this.updateStatus(\"disconnected\");\n      this.options.onDisconnect();\n    });\n\n    this.input.worklet.port.onmessage = this.onInputWorkletMessage;\n    this.output.worklet.port.onmessage = this.onOutputWorkletMessage;\n    this.updateStatus(\"connected\");\n  }\n\n  public endSession = async () => {\n    if (this.status !== \"connected\") return;\n    this.updateStatus(\"disconnecting\");\n\n    this.connection.close();\n    await this.input.close();\n    await this.output.close();\n\n    this.updateStatus(\"disconnected\");\n  };\n\n  private updateMode = (mode: Mode) => {\n    if (mode !== this.mode) {\n      this.mode = mode;\n      this.options.onModeChange({ mode });\n    }\n  };\n\n  private updateStatus = (status: Status) => {\n    if (status !== this.status) {\n      this.status = status;\n      this.options.onStatusChange({ status });\n    }\n  };\n\n  private updateCanSendFeedback = () => {\n    const canSendFeedback = this.currentEventId !== this.lastFeedbackEventId;\n    if (this.canSendFeedback !== canSendFeedback) {\n      this.canSendFeedback = canSendFeedback;\n      this.options.onCanSendFeedbackChange({ canSendFeedback });\n    }\n  };\n\n  private onEvent = async (event: MessageEvent) => {\n    try {\n      const parsedEvent = JSON.parse(event.data);\n\n      if (!isValidSocketEvent(parsedEvent)) {\n        return;\n      }\n\n      switch (parsedEvent.type) {\n        case \"interruption\": {\n          if (parsedEvent.interruption_event) {\n            this.lastInterruptTimestamp =\n              parsedEvent.interruption_event.event_id;\n          }\n          this.fadeOutAudio();\n          break;\n        }\n\n        case \"agent_response\": {\n          this.options.onMessage({\n            source: \"ai\",\n            message: parsedEvent.agent_response_event.agent_response,\n          });\n          break;\n        }\n\n        case \"user_transcript\": {\n          this.options.onMessage({\n            source: \"user\",\n            message: parsedEvent.user_transcription_event.user_transcript,\n          });\n          break;\n        }\n\n        case \"internal_tentative_agent_response\": {\n          this.options.onDebug({\n            type: \"tentative_agent_response\",\n            response:\n              parsedEvent.tentative_agent_response_internal_event\n                .tentative_agent_response,\n          });\n          break;\n        }\n\n        case \"client_tool_call\": {\n          if (\n            this.options.clientTools.hasOwnProperty(\n              parsedEvent.client_tool_call.tool_name\n            )\n          ) {\n            try {\n              const result =\n                (await this.options.clientTools[\n                  parsedEvent.client_tool_call.tool_name\n                ](parsedEvent.client_tool_call.parameters)) ??\n                \"Client tool execution successful.\"; // default client-tool call response\n\n              this.connection.sendMessage({\n                type: \"client_tool_result\",\n                tool_call_id: parsedEvent.client_tool_call.tool_call_id,\n                result: result,\n                is_error: false,\n              });\n            } catch (e) {\n              this.onError(\n                \"Client tool execution failed with following error: \" +\n                  (e as Error)?.message,\n                {\n                  clientToolName: parsedEvent.client_tool_call.tool_name,\n                }\n              );\n              this.connection.sendMessage({\n                type: \"client_tool_result\",\n                tool_call_id: parsedEvent.client_tool_call.tool_call_id,\n                result:\n                  \"Client tool execution failed: \" + (e as Error)?.message,\n                is_error: true,\n              });\n            }\n\n            break;\n          }\n\n          if (this.options.onUnhandledClientToolCall) {\n            this.options.onUnhandledClientToolCall(\n              parsedEvent.client_tool_call\n            );\n\n            break;\n          }\n\n          this.onError(\n            `Client tool with name ${parsedEvent.client_tool_call.tool_name} is not defined on client`,\n            {\n              clientToolName: parsedEvent.client_tool_call.tool_name,\n            }\n          );\n          this.connection.sendMessage({\n            type: \"client_tool_result\",\n            tool_call_id: parsedEvent.client_tool_call.tool_call_id,\n            result: `Client tool with name ${parsedEvent.client_tool_call.tool_name} is not defined on client`,\n            is_error: true,\n          });\n\n          break;\n        }\n\n        case \"audio\": {\n          if (this.lastInterruptTimestamp <= parsedEvent.audio_event.event_id) {\n            this.addAudioBase64Chunk(parsedEvent.audio_event.audio_base_64);\n            this.currentEventId = parsedEvent.audio_event.event_id;\n            this.updateCanSendFeedback();\n            this.updateMode(\"speaking\");\n          }\n          break;\n        }\n\n        case \"ping\": {\n          this.connection.sendMessage({\n            type: \"pong\",\n            event_id: (parsedEvent as PingEvent).ping_event.event_id,\n          });\n          // parsedEvent.ping_event.ping_ms can be used on client side, for example\n          // to warn if ping is too high that experience might be degraded.\n          break;\n        }\n\n        // unhandled events are expected to be internal events\n        default: {\n          this.options.onDebug(parsedEvent);\n          break;\n        }\n      }\n    } catch {\n      this.onError(\"Failed to parse event data\", { event });\n      return;\n    }\n  };\n\n  private onInputWorkletMessage = (event: MessageEvent): void => {\n    const rawAudioPcmData = event.data[0];\n    const maxVolume = event.data[1];\n\n    // check if the sound was loud enough, so we don't send unnecessary chunks\n    // then forward audio to websocket\n    //if (maxVolume > 0.001) {\n    if (this.status === \"connected\") {\n      this.connection.sendMessage({\n        user_audio_chunk: arrayBufferToBase64(rawAudioPcmData.buffer),\n        //sample_rate: this.inputAudioContext?.inputSampleRate || this.inputSampleRate,\n      });\n    }\n    //}\n  };\n\n  private onOutputWorkletMessage = ({ data }: MessageEvent): void => {\n    if (data.type === \"process\") {\n      this.updateMode(data.finished ? \"listening\" : \"speaking\");\n    }\n  };\n\n  private addAudioBase64Chunk = async (chunk: string) => {\n    this.output.gain.gain.value = this.volume;\n    this.output.worklet.port.postMessage({ type: \"clearInterrupted\" });\n    this.output.worklet.port.postMessage({\n      type: \"buffer\",\n      buffer: base64ToArrayBuffer(chunk),\n    });\n  };\n\n  private fadeOutAudio = async () => {\n    // mute agent\n    this.updateMode(\"listening\");\n    this.output.worklet.port.postMessage({ type: \"interrupt\" });\n    this.output.gain.gain.exponentialRampToValueAtTime(\n      0.0001,\n      this.output.context.currentTime + 2\n    );\n\n    // reset volume back\n    setTimeout(() => {\n      this.output.gain.gain.value = this.volume;\n      this.output.worklet.port.postMessage({ type: \"clearInterrupted\" });\n    }, 2000); // Adjust the duration as needed\n  };\n\n  private onError = (message: string, context?: any) => {\n    console.error(message, context);\n    this.options.onError(message, context);\n  };\n\n  private calculateVolume = (frequencyData: Uint8Array) => {\n    if (frequencyData.length === 0) {\n      return 0;\n    }\n\n    // TODO: Currently this averages all frequencies, but we should probably\n    // bias towards the frequencies that are more typical for human voice\n    let volume = 0;\n    for (let i = 0; i < frequencyData.length; i++) {\n      volume += frequencyData[i] / 255;\n    }\n    volume /= frequencyData.length;\n\n    return volume < 0 ? 0 : volume > 1 ? 1 : volume;\n  };\n\n  public getId = () => this.connection.conversationId;\n\n  public setVolume = ({ volume }: { volume: number }) => {\n    this.volume = volume;\n  };\n\n  public getInputByteFrequencyData = () => {\n    this.inputFrequencyData ??= new Uint8Array(\n      this.input.analyser.frequencyBinCount\n    );\n    this.input.analyser.getByteFrequencyData(this.inputFrequencyData);\n    return this.inputFrequencyData;\n  };\n\n  public getOutputByteFrequencyData = () => {\n    this.outputFrequencyData ??= new Uint8Array(\n      this.output.analyser.frequencyBinCount\n    );\n    this.output.analyser.getByteFrequencyData(this.outputFrequencyData);\n    return this.outputFrequencyData;\n  };\n\n  public getInputVolume = () => {\n    return this.calculateVolume(this.getInputByteFrequencyData());\n  };\n\n  public getOutputVolume = () => {\n    return this.calculateVolume(this.getOutputByteFrequencyData());\n  };\n\n  public sendFeedback = (like: boolean) => {\n    if (!this.canSendFeedback) {\n      console.warn(\n        this.lastFeedbackEventId === 0\n          ? \"Cannot send feedback: the conversation has not started yet.\"\n          : \"Cannot send feedback: feedback has already been sent for the current response.\"\n      );\n      return;\n    }\n\n    this.connection.sendMessage({\n      type: \"feedback\",\n      score: like ? \"like\" : \"dislike\",\n      event_id: this.currentEventId,\n    });\n    this.lastFeedbackEventId = this.currentEventId;\n    this.updateCanSendFeedback();\n  };\n}\n\nexport function postOverallFeedback(\n  conversationId: string,\n  like: boolean,\n  origin: string = HTTPS_API_ORIGIN\n) {\n  return fetch(`${origin}/v1/convai/conversations/${conversationId}/feedback`, {\n    method: \"POST\",\n    body: JSON.stringify({\n      feedback: like ? \"like\" : \"dislike\",\n    }),\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  });\n}\n"],"names":["arrayBufferToBase64","b","buffer","Uint8Array","window","btoa","String","fromCharCode","base64ToArrayBuffer","base64","binaryString","atob","len","length","bytes","i","charCodeAt","blob","Blob","type","rawAudioProcessor","URL","createObjectURL","Input","create","sampleRate","format","preferHeadphonesForIosDevices","context","inputStream","options","ideal","echoCancellation","noiseSuppression","preliminaryInputStream","navigator","mediaDevices","getUserMedia","audio","getTracks","forEach","track","stop","includes","platform","userAgent","document","idealDevice","enumerateDevices","find","d","kind","keyword","label","toLowerCase","deviceId","supportsSampleRateConstraint","getSupportedConstraints","AudioContext","analyser","createAnalyser","audioWorklet","addModule","source","createMediaStreamSource","worklet","AudioWorkletNode","port","postMessage","connect","error","_inputStream","_context","close","constructor","this","audioConcatProcessor","Output","gain","createGain","destination","isValidSocketEvent","event","Connection","config","socket","_config$origin","origin","url","signedUrl","agentId","protocols","authorization","push","WebSocket","conversationConfig","Promise","resolve","reject","addEventListener","_socket","overridesEvent","_config$overrides$age","_config$overrides$age2","_config$overrides$age3","_config$overrides$tts","overrides","conversation_config_override","agent","prompt","first_message","firstMessage","language","tts","voice_id","voiceId","customLlmExtraBody","custom_llm_extra_body","send","JSON","stringify","once","message","parse","data","conversation_initiation_metadata_event","console","warn","conversation_id","agent_output_audio_format","user_input_audio_format","inputFormat","parseFormat","outputFormat","_socket2","conversationId","sendMessage","formatPart","sampleRatePart","split","Error","parseInt","isNaN","defaultClientTools","clientTools","defaultCallbacks","onConnect","onDebug","onDisconnect","onError","onMessage","onModeChange","onStatusChange","onCanSendFeedbackChange","Conversation","startSession","fullOptions","_extends","status","canSendFeedback","input","connection","output","all","_connection","_input","_output","_this","lastInterruptTimestamp","mode","inputFrequencyData","outputFrequencyData","volume","currentEventId","lastFeedbackEventId","endSession","async","updateStatus","updateMode","updateCanSendFeedback","onEvent","parsedEvent","interruption_event","event_id","fadeOutAudio","agent_response_event","agent_response","user_transcription_event","user_transcript","response","tentative_agent_response_internal_event","tentative_agent_response","hasOwnProperty","client_tool_call","tool_name","_await$_this$options$","result","parameters","tool_call_id","is_error","e","clientToolName","onUnhandledClientToolCall","audio_event","addAudioBase64Chunk","audio_base_64","ping_event","_unused","onInputWorkletMessage","user_audio_chunk","onOutputWorkletMessage","finished","chunk","value","exponentialRampToValueAtTime","currentTime","setTimeout","calculateVolume","frequencyData","getId","setVolume","getInputByteFrequencyData","frequencyBinCount","getByteFrequencyData","getOutputByteFrequencyData","getInputVolume","getOutputVolume","sendFeedback","like","score","onmessage","postOverallFeedback","fetch","method","body","feedback","headers"],"mappings":"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"}